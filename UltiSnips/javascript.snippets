priority -50

############
#  COMMON  #
############

# The smart snippets use a global options called
# "g:ultisnips_javascript.{option}" which can control the format
# of trailing semicolon, space before function paren, etc.
#
# e.g.
# let g:ultisnips_javascript = {
#      \ 'keyword-spacing': 'always',
#      \ 'semi': 'never',
#      \ 'space-before-function-paren': 'always',
#      \ }


global !p
from javascript_snippets import (
	semi, space_before_function_paren, keyword_spacing
)
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet cl "console.log"
console.log(${0});
endsnippet

snippet cd "console.debug"
console.debug(${0});
endsnippet

snippet ce "console.error"
console.error(${0});
endsnippet

snippet cw "console.warn"
console.warn(${0});
endsnippet

snippet ci "console.info"
console.info(${0});
endsnippet

snippet ct "console.trace"
console.trace(${0:label});
endsnippet

snippet cd "console.dir"
console.trace(${0:label});
endsnippet

snippet ct "console.dir"
console.table(${0:label});
endsnippet

snippet /* "Comment code JS"
/*
${VISUAL}
*/$0
endsnippet

snippet var "Declaration var"
var ${1} = ${2};
endsnippet

snippet const "Declaration const"
const ${1} = ${2};
endsnippet

snippet let "Declaration let"
let ${1} = ${2};
endsnippet

snippet qs "Query selector"
${1:document}.querySelector${2:All}(${3});${0}
endsnippet

snippet createElement "Create Element"
${1:document}.createElement(${2});${0}
endsnippet

snippet get "Get Elements"
${1:document}.getElement${2/(T)|(C)|.*/(?1:s)(?2:s)/}By${2:T}${2/(T)|(I)|(C).*/(?1:agName)(?2:d)(?3:lassName)/}('$3')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function`!p snip.rv = space_before_function_paren(snip)`(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function`!p snip.rv = space_before_function_paren(snip)`(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function`!p snip.rv = space_before_function_paren(snip)`(${3:first_argument}) {
	${VISUAL}$0
}`!p snip.rv = semi(snip)`
endsnippet

snippet aevent "Add Event Listener"
${1:target}.addEventListener('${2:click}', () => {
	${VISUAL}$0
	});
endsnippet

snippet fun "function (named)" b
function ${1:function_name}`!p snip.rv = space_before_function_paren(snip)`(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet vf "function (assigned to var)"
${1:var }${2:function_name} = function $2`!p snip.rv = space_before_function_paren(snip)`($3) {
	${VISUAL}$0
}`!p snip.rv = semi(snip)`
endsnippet

# Drop priority so this only triggers when not beginning of line.
priority -51
snippet fun "function (anonymous)" w
function`!p snip.rv = space_before_function_paren(snip)`($1) {
	${VISUAL}$0
}$2
endsnippet
priority -50

snippet anf "function (anonymous)" i
function`!p snip.rv = space_before_function_paren(snip)`($1) {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function`!p snip.rv = space_before_function_paren(snip)`(${1:window}) {
	${VISUAL}$0
}(${2:$1}))`!p snip.rv = semi(snip)`
endsnippet

snippet ;fe "Minify safe iife"
;(function`!p snip.rv = space_before_function_paren(snip)`(${1}) {
	${VISUAL}$0
}(${2}))
endsnippet

snippet timeout "setTimeout function"
setTimeout(function`!p snip.rv = space_before_function_paren(snip)`() {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10})`!p snip.rv = semi(snip)`
endsnippet

snippet for "for (...) {...}"
for (var ${1:i} = 0; $1 < ${2:Things}${3:.length}; $1++) {
	${0:${VISUAL}}
}
endsnippet

snippet forl "for (...) {...}"
for (let ${1:i} = 0; $1 < ${2:Things}${3:.length}; $1++) {
	${0:${VISUAL}}
}
endsnippet

snippet forr "reversed for (...) {...}"
for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${0:${VISUAL}}
}
endsnippet

snippet wh "(condition) { ... }"
while (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

snippet fori "for prop in obj using hasOwnProperty" b
for`!p snip.rv = keyword_spacing(snip)`(${1:prop} in ${2:obj}){
	if`!p snip.rv = keyword_spacing(snip)`($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

snippet if "if (condition) { ... }"
if`!p snip.rv = keyword_spacing(snip)`(${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if`!p snip.rv = keyword_spacing(snip)`(${1:true}) {
	${VISUAL}$0
}`!p snip.rv = keyword_spacing(snip)`else`!p snip.rv = keyword_spacing(snip)`{
	${2}
}
endsnippet

snippet switch
switch`!p snip.rv = keyword_spacing(snip)`(${VISUAL}${1:expression}) {
	case '${VISUAL}${3:case}':
		${4}
		break`!p snip.rv = semi(snip)`
	${0}
	default:
		${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case`!p snip.rv = keyword_spacing(snip)`'${VISUAL}${1:case}':
	${VISUAL}$0
	break`!p snip.rv = semi(snip)`
endsnippet

snippet do "do { ... } while (condition)"
do`!p snip.rv = keyword_spacing(snip)`{
	${VISUAL}$0
}`!p snip.rv = keyword_spacing(snip)`while`!p snip.rv = keyword_spacing(snip)`(${1:/* condition */})`!p snip.rv = semi(snip)`
endsnippet

snippet ret "Return statement"
return ${VISUAL}$0`!p snip.rv = semi(snip)`
endsnippet

snippet us
'use strict'`!p snip.rv = semi(snip)`
endsnippet


## Functions
## prototype
#snippet proto
#	${1:class_name}.prototype.${2:method_name} = function(${3}) {
#		${0:${VISUAL}}
#	};
## Function
#snippet fun "function"
#	function ${1:function_name}(${2}) {
#		${0:${VISUAL}}
#	}
## Asynchronous Function
#snippet asf "async function"
#	async function ${1:function_name}(${2}) {
#		${0:${VISUAL}}
#	}
## Anonymous Function
#snippet anf "" w
#	function(${1}) {
#		${0:${VISUAL}}
#	}
## Anonymous Function assigned to variable
#snippet vaf
#	var ${1:function_name} = function(${2}) {
#		${0:${VISUAL}}
#	};
## Function assigned to variable
#snippet vf
#	var ${1:function_name} = function $1(${2}) {
#		${0:${VISUAL}}
#	};
## Immediate function
#snippet (f
#	(function(${1}) {
#		${0:${VISUAL}}
#	}(${2}));
## Minify safe iife
#snippet ;fe
#	;(function(${1}) {
#		${0:${VISUAL}}
#	}(${2}))
## self-defining function
#snippet sdf
#	var ${1:function_name} = function (${2:argument}) {
#		${3}
#
#		$1 = function ($2) {
#			${0:${VISUAL}}
#		};
#	};
## Flow control
## if
#snippet if "if (condition) { ... }"
#	if (${1:true}) {
#		${0:${VISUAL}}
#	}
## if ... else
#snippet ife "if (condition) { ... } else { ... }"
#	if (${1:true}) {
#		${0:${VISUAL}}
#	} else {
#		${2}
#	}
## tertiary conditional
#snippet ter
#	${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
## switch
#snippet switch
#	switch (${1:expression}) {
#		case '${3:case}':
#			${4}
#			break;
#		${0}
#		default:
#			${2}
#	}
#snippet case "case 'xyz': ... break"
#	case '${1:case}':
#		${0:${VISUAL}}
#		break;
#snippet try "try { ... } catch(e) { ... }"
#	try {
#		${0:${VISUAL}}
#	} catch (${1:e}) {
#		${2:/* handle error */}
#	}
#snippet tryf "try { ... } catch(e) { ... } finally { ... }"
#	try {
#		${0:${VISUAL}}
#	} catch (${1:e}) {
#		${2:/* handle error */}
#	} finally {
#		${3:/* be executed regardless of the try / catch result*/}
#	}
## throw Error
#snippet terr
#	throw new Error('${1:error message}')
## return
#snippet ret
#	return ${0:result};
## Objects
## Object Method
#snippet :f
#	${1:method_name}: function (${2:attribute}) {
#		${0:${VISUAL}}
#	},
## hasOwnProperty
#snippet has
#	hasOwnProperty(${0})
## singleton
#snippet sing
#	function ${1:Singleton} (${2:argument}) {
#		// the cached instance
#		var instance;
#
#		// rewrite the constructor
#		$1 = function $1($2) {
#			return instance;
#		};
#
#		// carry over the prototype properties
#		$1.prototype = this;
#
#		// the instance
#		instance = new $1();
#
#		// reset the constructor pointer
#		instance.constructor = $1;
#
#		${0}
#
#		return instance;
#	}
## Crockford's object function
#snippet obj
#	function object(o) {
#		function F() {}
#		F.prototype = o;
#		return new F();
#	}
## Define multiple properties
#snippet props
#	var ${1:my_object} = Object.defineProperties(
#		${2:new Object()},
#		{
#			${3:property} : {
#				get : function $1_$3_getter() {
#					// getter code
#				},
#				set : function $1_$3_setter(value) {
#					// setter code
#				},
#				value        : ${4:value},
#				writeable    : ${5:boolean},
#				enumerable   : ${6:boolean},
#				configurable : ${0:boolean}
#			}
#		}
#	);
## Define single property
#snippet prop
#	Object.defineProperty(
#		${1:object},
#		'${2:property}',
#		{
#			get : function $1_$2_getter() {
#				// getter code
#			},
#			set : function $1_$2_setter(value) {
#				// setter code
#			},
#			value        : ${3:value},
#			writeable    : ${4:boolean},
#			enumerable   : ${5:boolean},
#			configurable : ${0:boolean}
#		}
#	);
## Documentation
## docstring
#snippet /**
#	/**
#	 * ${0:description}
#	 *
#	 */
#snippet @par
#	@param {${1:type}} ${2:name} ${0:description}
#snippet @ret
#	@return {${1:type}} ${0:description}
## JSON.parse
#snippet jsonp
#	JSON.parse(${0:jstr});
## JSON.stringify
#snippet jsons
#	JSON.stringify(${0:object});
## DOM selectors
## Get elements
#snippet get
#	getElementsBy${1:TagName}('${0}')
## Get element
#snippet gett
#	getElementBy${1:Id}('${0}')
## Elements by class
#snippet by.
#	${1:document}.getElementsByClassName('${0:class}')
## Element by ID
#snippet by#
#	${1:document}.getElementById('${0:element ID}')
## Query selector
#snippet qs
#	${1:document}.querySelector('${0:CSS selector}')
## Query selector all
#snippet qsa
#	${1:document}.querySelectorAll('${0:CSS selector}')
## Debugging
#snippet de
#	debugger;
#snippet ctime "console.time ... console.timeEnd"
#	console.time("${1:label}");
#	${0:${VISUAL}}
#	console.timeEnd("$1");
#snippet ctimestamp "console.timeStamp"
#	console.timeStamp("${1:label}");
#snippet ca "console.assert"
#	console.assert(${1:expression}, ${0:obj});
#snippet cclear "console.clear"
#	console.clear();
#snippet cdir "console.dir"
#	console.dir(${0:obj});
#snippet cdirx "console.dirxml"
#	console.dirxml(${1:object});
#snippet cgroup "console.group"
#	console.group("${1:label}");
#	${0:${VISUAL}}
#	console.groupEnd();
#snippet cgroupc "console.groupCollapsed"
#	console.groupCollapsed("${1:label}");
#	${0:${VISUAL}}
#	console.groupEnd();
#snippet cprof "console.profile"
#	console.profile("${1:label}");
#	${0:${VISUAL}}
#	console.profileEnd();
#snippet ctable "console.table"
#	console.table(${1:"${2:value}"});
## Misc
#snippet us
#	'use strict';
## setTimeout function
#snippet timeout
#	setTimeout(function () {${0}}${2}, ${1:10});
#snippet const
#	const ${1} = ${0};
#snippet constn
#	const ${1} = new ${0};
#snippet let
#	let ${1} = ${0};
#snippet im "import xyz from 'xyz'"
#	import ${1} from '${2:$1}';
#snippet imas "import * as xyz from 'xyz'"
#	import * as ${1} from '${2:$1}';
#snippet imm "import { member } from 'xyz'"
#	import { ${1} } from '${2}';
#snippet cla
#	class ${1} {
#		${0:${VISUAL}}
#	}
#snippet clax
#	class ${1} extends ${2} {
#		${0:${VISUAL}}
#	}
#snippet clac
#	class ${1} {
#		constructor(${2}) {
#			${0:${VISUAL}}
#		}
#	}
#snippet foro "for (const prop of object}) { ... }"
#	for (const ${1:prop} of ${2:object}) {
#		${0:$1}
#	}
#snippet fun*
#	function* ${1:function_name}(${2}) {
#		${0:${VISUAL}}
#	}
#snippet c=>
#	const ${1:function_name} = (${2}) => {
#		${0:${VISUAL}}
#	}
#snippet caf
#	const ${1:function_name} = (${2}) => {
#		${0:${VISUAL}}
#	}
#snippet =>
#	(${1}) => {
#		${0:${VISUAL}}
#	}
#snippet af "() =>"
#	(${1}) => ${0:${VISUAL}}
#snippet afb "() => {}"
#	(${1}) => {
#		${0:${VISUAL}}
#	}
#snippet sym
#	const ${1} = Symbol('${0}');
#snippet ed
#	export default ${0}
#snippet ${
#	${${1}}${0}
#snippet aw "await"
#	await ${0:${VISUAL}}
#
# vim:ft=snippets:
