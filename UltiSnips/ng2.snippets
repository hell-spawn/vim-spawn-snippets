priority -70

############
#  COMMON  #
############

# The smart snippets use a global options called
# g:ultisnips_javascript.{option} which can control the format
# of trailing semicolon, space before function paren, etc.
#
# e.g.
# let g:ultisnips_javascript = {
#      \ 'keyword-spacing': 'always',
#      \ 'semi': 'never',
#      \ 'space-before-function-paren': 'always',
#      \ }


global !p
from javascript_snippets import (
	semi, space_before_function_paren, keyword_spacing
)
endglobal

############################################################################
#                            Snippets 			                           #
############################################################################

snippet  a-component "Angular Component" b
import { Component, OnInit } from '@angular/core';

@Component({
    selector: '${1:selector-name}',
    templateUrl: '${2:name}.component.html'
})

export class ${3:Name}Component implements OnInit {
    constructor() { }

    ngOnInit() { }$0
}
endsnippet

snippet a-component-inline "Angular Component with Inline Template" b
import { Component, OnInit } from '@angular/core';

@Component({
    selector: '${1:selector-name}',
    template: `$0`
})

export class ${2:Name}Component implements OnInit {
    constructor() { }

    ngOnInit() { }
}
endsnippet

snippet a-pipe "Angular pipe" b
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
    name: '${1:selector-name}'
})

export class ${2:Name}Pipe implements PipeTransform {
    transform(value: any, ...args: any[]): any {
        $0
    }
}
endsnippet

snippet a-service "Angular Service with Injectable ProvidedIn Root" b
import { Injectable } from '@angular/core';

@Injectable({providedIn: ${1:'root'}})
export class ${2:ServiceName}Service {
    constructor() { }
    $0
}
endsnippet

snippet a-route-path-default "Angular default route path" b
{ path: '', pathMatch: 'full', redirectTo: '${1:path}' }$0
endsnippet

snippet a-route-path-with-children "Angular route path with children" b
{
    path: '${1:path}', 
    component: ${2:Component},
    children: [
        { path: '${3:childpath}', component: ${4:ChildComponent} }
    ]
}$0
endsnippet

snippet a-route-path-404 "Angular 404 route path" b
{ path: '**', component: ${1:PathNotFoundComponent} }$0
endsnippet

snippet a-route-path-eager "Angular eager route path" b
{ path: '${1:path}', component: ${2:Name}Component },
endsnippet

snippet a-route-path-lazy "Angular lazy route path" b
{
    path: '${1:path}', 
    loadChildren: () => import('${2:lazy-path}').then(m => m.${3:lazy-module})
},
endsnippet

snippet a-route-params-subscribe "Angular - subscribe to routing parameters" b
this.route.paramMap
    .pipe(switchMap(params => params.get('id')), tap(id => (this.id = +id)))
    .subscribe(id => {$1});
$0
endsnippet

snippet a-httpclient-get "Angular HttpClient.get" b
return this.httpClient.get('${1:url}');$0
endsnippet

snippet a-service-httpclient "Angular service with HttpClient" b
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Injectable({providedIn: ${1:'root'}})
export class ${2:ServiceName}Service {
    constructor(private httpClient: HttpClient) { }
    $0
}
endsnippet

snippet a-http-interceptor-logging "Angular HttpInterceptor for Logging HttpClient" b
import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';

@Injectable()
export class LogInterceptor implements HttpInterceptor {
    constructor() {}

    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        const started = Date.now();
        return next.handle(req).pipe(
            tap(event => {
                if (event instanceof HttpResponse) {
                    const elapsed = Date.now() - started;
                    console.log(`Request for \\${req.urlWithParams} took \\${elapsed} ms.`);
                }
            })
        );
    }
}
endsnippet

snippet a-http-interceptor-headers "Angular HttpInterceptor for headers HttpClient" b
import { Injectable } from '@angular/core';
import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable()
export class HeaderInterceptor implements HttpInterceptor {
    constructor() {}

    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        const headers = req.headers
            .set('Content-Type', 'application/json');
        const authReq = req.clone({ headers });
        return next.handle(authReq);
    }
}
endsnippet

snippet a-http-interceptor "Empty Angular HttpInterceptor for HttpClient" b
import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable()
export class ${2:Your}Interceptor implements HttpInterceptor {
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        return next.handle(req);
    }
}
endsnippet

snippet a-output-event "Angular @Output event and emitter" b
@Output() ${1:eventName} = new EventEmitter<${2:eventType}>();
endsnippet

snippet a-subscribe "Angular observable subscribe" b
this.${1:service}.${2:function}.subscribe(${3:arg} => this.${4:property} = ${3:arg}); $0
endsnippet

snippet a-component-root "Angular App root component" b
import { Component } from '@angular/core';

@Component({
    selector: '${1:prefix-app}',
    template: `
        <router-outlet></router-outlet>
        `
})
export class ${2:App}Component { }
$0
endsnippet

snippet a-module-root "Angular Root Module" b
import { NgModule } from '@angular/core';
import { BrowserModule  } from '@angular/platform-browser';
import { HttpModule } from '@angular/http';

import { ${1:App}Component } from './${1:app}.component';

@NgModule({
    imports: [
        BrowserModule,
        HttpModule,
    ],
    declarations: [${1:App}Component],
    bootstrap: [${1:App}Component],
})
export class ${1:App}Module { }
$0
endsnippet

snippet a-routes "Route definitions" b
import { Routes } from '@angular/router';

export const routes: Routes = [${0}]
endsnippet

snippet a-module "Angular Module" b
import { NgModule } from '@angular/core';

import { ${1:Name}Component } from './${2:name}.component';

@NgModule({
    imports: [],
    exports: [],
    declarations: [${1:Name}Component],
    providers: [],
})
export class ${1:Name}Module { }
$0
endsnippet

snippet a-directive "Angular directive" b
import { Directive } from '@angular/core';

@Directive({ selector: '[${1:selector-name}]' })
export class ${2:Name}Directive {
    constructor() { }
}
endsnippet

snippet a-guard-can-activate "Angular CanActivate guard" b
import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';

@Injectable({providedIn: ${1:'root'}})
export class ${2:Name}Guard implements CanActivate {
    constructor() { }

    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
        return true;$0
    }
}
endsnippet

snippet a-guard-can-activate-child "Angular CanActivateChild guard" b
import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';

@Injectable({providedIn: ${1:'root'}})
export class ${2:Name}Guard implements CanActivateChild {
    constructor() { }

    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
        return true;$0
    }
}
endsnippet

snippet a-guard-can-load "Angular CanLoad guard" b
import { Injectable } from '@angular/core';
import { CanLoad, Route } from '@angular/router';

@Injectable({providedIn: ${1:'root'}})
export class ${2:Name}Guard implements CanLoad {
    constructor() { }

    canLoad(route: Route) {
        return true;$0
    }
}
endsnippet

snippet a-guard-can-deactivate "Angular CanDeactivate guard" b
import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';
import { Observable } from 'rxjs';

import { ${2:ComponentName}Component } from './${3:filename}.component';

// Consider using this interface for all CanDeactivate guards,
// and have your components implement this interface, too.
//
//   e.g. export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {
//
// export interface CanComponentDeactivate {
// canDeactivate: () => any;
// }

@Injectable({providedIn: ${4:'root'}})
export class ${1:Name}Guard implements CanDeactivate<${2:ComponentName}Component> {
    canDeactivate(
        component: ${2:ComponentName}Component,
        currentRoute: ActivatedRouteSnapshot, 
        currentState: RouterStateSnapshot
    ): Observable<boolean>|Promise<boolean>|boolean {
        return false;$0
    }
}
endsnippet

snippet a-preload-opt-in-strategy "Angular opt-in preload strategy" b
import { PreloadingStrategy, Route } from '@angular/router';
import { Observable, of } from 'rxjs';

export class PreloadSelectedModulesList implements PreloadingStrategy {
    preload(route: Route, load: Function): Observable<any> {
        return route.data && route.data['${1:preload}'] ? load() : of(null);
    }
}
$0
endsnippet

snippet a-preload-network-strategy "Angular network aware preload strategy" b
import { Injectable } from '@angular/core';
import { PreloadingStrategy, Route } from '@angular/router';
import { Observable, EMPTY } from 'rxjs';

// avoid typing issues for now
export declare var navigator;

@Injectable({ providedIn: 'root' })
export class NetworkAwarePreloadStrategy implements PreloadingStrategy {
    preload(route: Route, load: () => Observable<any>): Observable<any> {
        return this.hasGoodConnection() ? load() : EMPTY;
    }

    hasGoodConnection(): boolean {
        const conn = navigator.connection;
        if (conn) {
            if (conn.saveData) {
                return false; // save data mode is enabled, so dont preload
            }
            const avoidTheseConnections = ['slow-2g', '2g' /* , '3g', '4g' */];
            const effectiveType = conn.effectiveType || '';
            if (avoidTheseConnections.includes(effectiveType)) {
                return false;
            }
        }
        return true;
    }
}
endsnippet

snippet a-router-events "Angular Router Events" b
checkEvents() {
    this.router.events.subscribe(event => {
        switch (true) {
            case event instanceof ${1:eventName}:
                $0
                break;

            default:
                break;
        }
    });
}
endsnippet

snippet a-ctor-skip-self "Angular Module SkipSelf constructor" b
constructor( @Optional() @SkipSelf() parentModule: ${1:ModuleName} {
    if (parentModule) {
        const msg = `${1:ModuleName} has already been loaded. 
            Import ${1:ModuleName} once, only, in the root AppModule.`;
        throw new Error(msg);
    }
}
endsnippet

snippet a-rxjs-import "RxJs import" b
import { ${1:Observable} } from 'rxjs'; $0
endsnippet

snippet a-rxjs-operator-import "RxJs import" b
import { ${1:map} } from 'rxjs/operators'; $0
endsnippet

snippet a-resolver "Angular Resolver" b
import { Injectable } from '@angular/core';
import { Resolve, ActivatedRouteSnapshot } from '@angular/router';
import { Observable } from 'rxjs';

@Injectable({ providedIn: ${1:'root'} })
export class ${2:YourResolver} implements Resolve<${3:ObjectToResolve}> {
    resolve(route: ActivatedRouteSnapshot): Observable<${3:ObjectToResolve}> | Promise<${3:ObjectToResolve}> | ${3:ObjectToResolve} {
        return ${0};
    }
}
endsnippet
snippet a-ngrx-store-module "NgRx Store Module" b
import { NgModule } from '@angular/core';
import { EffectsModule } from '@ngrx/effects';
import { StoreModule } from '@ngrx/store';
import { StoreDevtoolsModule } from '@ngrx/store-devtools';
import { environment } from '../../environments/environment';

@NgModule({
  imports: [
    StoreModule.forRoot({}),
    EffectsModule.forRoot([]),
    environment.production ? [] : StoreDevtoolsModule.instrument()
  ]
})
export class $1StoreModule {}
endsnippet

snippet a-ngrx-create-action "Creates an NgRx Action" b
export const ${1:action} = createAction('[${2:Source}] ${3:Event}');
endsnippet

snippet a-ngrx-create-action-props "Creates an NgRx Action with Props" b
export const ${1:action} = createAction('[${2:Source}] ${3:Event}', props<{${4:key}: ${5:type}}>());
endsnippet

snippet a-ngrx-create-reducer "Creates an NgRx Reducer" b
const ${1:feature}Reducer = createReducer(
    initialState,
    on($1Actions.action, state => ({ ...state, ${2:prop}: ${3:updatedValue} })),
);

export function reducer(state: State | undefined, action: Action) {
    return $1Reducer(state, action);
}
endsnippet

snippet a-ngrx-create-effect "Creates an NgRx Effect" b
${1:effectName}$ = createEffect(() => {
    return this.actions$.pipe(
            ofType(${2:action}),
            /** An EMPTY observable only emits completion. Replace with your own observable stream */
            ${3:operator}(() => ${4:EMPTY}));
});
endsnippet

snippet a-ngrx-create-effect-api "Creates an NgRx Effect Scaffolded for API Call" b
${1:effectName}$ = createEffect(() => {
    return this.actions$.pipe(
            ofType(${2:Feature}Actions.${3:action}),
            ${4:operator}(() =>
                ${5:apiSource}.pipe(
                    map(data => $2Actions.$3Success({ data })),
                    catchError(error => of($2Actions.$3Failure({ error }))))
                ),
    );
});
endsnippet

snippet a-ngrx-create-selector "Creates an NgRx Selector" b
export const select${1:Feature}${2:Property} = createSelector(
    select$1,
    (state: $1State) => state.${3:property}
);
endsnippet

snippet a-ngrx-create-selector-props "Creates an NgRx Selector using props" b
export const select${1:Feature}${2:Property} = createSelector(
    select$1,
    (state: $1State, props) => ${3:selectLogic}
);
endsnippet

snippet a-ngrx-data-entity-data-module-import "Import NgRx Entity Data Module" b
EntityDataModule.forRoot(${1:entityConfig}),
endsnippet

snippet a-ngrx-data-entity-metadata "NgRx Data Entity Metadata" b
import { EntityMetadataMap } from '@ngrx/data';

const entityMetadata: EntityMetadataMap = {
  ${1:Model1}: {},${0}
};

export const entityConfig = {
  entityMetadata
};
endsnippet

snippet a-ngrx-data-entity-collection-data-service "NgRx Data Entity Collection Data Service" b
import { Injectable } from '@angular/core';
import {
  EntityCollectionServiceBase,
  EntityCollectionServiceElementsFactory
} from '@ngrx/data';
import { ${1:Model} } from '${2:../core}';

@Injectable({ providedIn: ${3:'root'} })
export class ${1:Model}Service extends EntityCollectionServiceBase<${1:Model}> {
  constructor(serviceElementsFactory: EntityCollectionServiceElementsFactory) {
    super('${1:Model}', serviceElementsFactory);
  }
}
endsnippet

snippet a-trackby "TrackBy Function" b
${1:trackBy}(index: number, ${2:name}: ${3:model}): ${4:number} {   return ${2:name}${5:.id};$0 }
endsnippet

# vim:ft=snippets:
